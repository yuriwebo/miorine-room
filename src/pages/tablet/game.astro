---
import BaseLayout from "../../layouts/BaseLayout.astro";
import gunImage from '../../images/gun.png';
import prosperaImage from '../../images/prospera.png';
import bandaiImage from '../../images/bandai.png';
import dellingImage from '../../images/delling.png';
import '../../styles/game.css';
---
<BaseLayout>
  <div class="content game-container">
    <div id="shooter-game">
      <div class="enemy-container">
        <img class="enemy" id="enemy1" src={dellingImage.src} alt="米总爹" draggable="false">
        <img class="enemy" id="enemy2" src={prosperaImage.src} alt="狸猫妈" draggable="false">
        <img class="enemy" id="enemy3" src={bandaiImage.src} alt="恐同万代老登" draggable="false">
      </div>
      <div id="next-stage">
        <p id="countdown">10</p>
        <p>
          NEXT STAGE<br>
          TOUCH SCREEN TO CONTINUE
        </p>
      </div>
      <img id="gun" src={gunImage.src} alt="枪" draggable="false">
    </div>
  </div>
</BaseLayout>

<script>
import type { get } from "lodash";

  enum GameState {
    Ready,      // 等待开始
    Countdown,  // 倒计时中
    Playing     // 游戏中
  }

  class Gun {
    private element: HTMLImageElement;
    private positions = ["75px", "50%", "calc(100% - 75px)"]; // 左 中 右
    private currentIndex = 1; // 默认中间
    private moveDuration = 400 // 每次移动动画时间（ms）
    private moving = false; // 防止连续触发
    private moveQueue: ("left" | "right")[] = []; // 动作队列

    constructor(element: HTMLImageElement) {
      this.element = element;
      this.reset();
    }

    get index() {
      return this.currentIndex;
    }

    get isMoving() {
      return this.moving;
    }

    moveLeft() {
      this.enqueue("left");
    }

    moveRight() {
      this.enqueue("right");
    }

    private enqueue(direction: "left" | "right") {
      this.moveQueue.push(direction);
      this.tryMoveNext();
    }

    private tryMoveNext() {
      if (this.moving || this.moveQueue.length === 0) return;

      const nextMove = this.moveQueue.shift(); // 取队首动作
      let targetIndex = this.currentIndex;

      if (nextMove === "left" && this.currentIndex > 0) targetIndex--;
      if (nextMove === "right" && this.currentIndex < this.positions.length - 1) targetIndex++;

      if (targetIndex === this.currentIndex) {
        this.tryMoveNext(); // 移动无效（到边界），尝试下一个动作
        return;
      }

      this.moveTo(targetIndex);
    }

    private moveTo(targetIndex: number) {
      const from = this.positions[this.currentIndex];
      const to = this.positions[targetIndex];
      this.moving = true;

      const anim = this.element.animate(
        [
          { left: from, easing: "ease-in-out" },
          { left: to, easing: "ease-in-out" },
        ], {
          duration: this.moveDuration,
        }
      );

      anim.onfinish = () => {
        this.currentIndex = targetIndex;
        this.updatePosition(); // 确保结束后定位准确
        anim.cancel(); // 清除动画状态
        this.moving = false;
        this.tryMoveNext();  // 执行队列中下一个动作
      };
    }

    updatePosition() {
      this.element.style.left = this.positions[this.currentIndex];
    }

    reset() {
      this.currentIndex = 1;
      this.updatePosition();
      this.moveQueue = [];
      this.moving = false;
    }
  }

  class Countdown {
    private element: HTMLDivElement;
    private textElement: HTMLParagraphElement;
    private timer: number | null = null;
    private duration: number;
    private onFinish: () => void;

    constructor(element: HTMLDivElement, textElement: HTMLParagraphElement, duration: number, onFinish: () => void) {
      this.element = element;
      this.textElement = textElement;
      this.duration = duration;
      this.onFinish = onFinish;
    }

    start() {
      this.element.style.display = "block"; // 显示倒计时
      let countdown = this.duration;
      this.textElement.innerText = countdown.toString();  // 初始值

      this.timer = window.setInterval(() => {
        countdown--;
        this.textElement.innerText = countdown.toString();

        // 倒计时自行结束
        if (countdown < 0) {
          this.cancel();
        }
      }, 1000);
    }

    cancel() {
      if (this.timer !== null) {
        clearInterval(this.timer);
        this.timer = null;
      }
      this.element.style.display = "none"; // 隐藏倒计时
      this.textElement.innerText = this.duration.toString(); // 回复倒计时初始值
      this.onFinish();
    }
  }

  // -------------------- 游戏控制器 --------------------
  const gameContainer = document.querySelector(".game-container") as HTMLDivElement;
  const enemies = [
    document.getElementById("enemy1") as HTMLImageElement,
    document.getElementById("enemy2") as HTMLImageElement,
    document.getElementById("enemy3") as HTMLImageElement,
  ];
  const gunElement = document.getElementById("gun") as HTMLImageElement;
  const nextStage = document.getElementById("next-stage") as HTMLDivElement;
  const countdownP = document.getElementById("countdown") as HTMLParagraphElement;
  const shooterGame = document.getElementById("shooter-game") as HTMLDivElement;

  const gun = new Gun(gunElement);
  let state: GameState = GameState.Ready;

  const countdown = new Countdown(nextStage, countdownP, 10, () => {
    // 倒计时结束：重置敌人、枪位置、游戏状态
    enemies.forEach(e => e.style.display = "block");
    gun.reset();
    state = GameState.Ready;
  });

  // 键盘控制左右移动（支持A/D + ←/→）
  window.addEventListener("keydown", (e) => {
    if (state !== GameState.Ready && state !== GameState.Playing) return;

    const key = e.key.toLowerCase();
    if (key === "arrowleft" || key === "a" ) {
      gun.moveLeft();
    } else if (key === "arrowright" || key === "d") {
      gun.moveRight();
    }
  });

  gameContainer.addEventListener("click", (e: MouseEvent) => {
    if (state === GameState.Countdown) {
      // 打断倒计时并复位枪
      countdown.cancel();
      return;
    }

    if (state === GameState.Ready || state === GameState.Playing) {
      // 开始游戏
      state = GameState.Playing;

      // 获取shooterGame在视口中的位置等
      const rect = shooterGame.getBoundingClientRect();
      // 获取点击处相对于shooterGame的坐标
      // clientX/Y：点击处相对于视口的坐标
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      createRipple(shooterGame, x, y);

      // 枪正在移动中，不能击中敌人
      if (gun.isMoving) return;

      const index = gun.index; // 获取当前枪位 0, 1, 2
      const targetEnemy = enemies[index];
      if (targetEnemy && targetEnemy.style.display !== "none") {
        targetEnemy.style.display = "none";

        // 检查是否所有敌人都消失
        const allGone = enemies.every(e => e.style.display === "none");
        if (allGone) {
          // 全部打完，进入倒计时
          state = GameState.Countdown;
          countdown.start();
        }
      }
    }
  });

  // 点击处动效
  const createRipple = (game: HTMLElement, x: number, y: number) => {
    const rippleWrapper = document.createElement("div");
    rippleWrapper.className = "ripple-wrapper";

    const outer = document.createElement("span");
    outer.className = "ripple-outer";

    const inner = document.createElement("span");
    inner.className = "ripple-inner";

    rippleWrapper.append(outer, inner);

    // 把圆心定位到点击位置
    // offsetWidth/Height：元素的布局宽度（px）
    rippleWrapper.style.left = `${x}px`;
    rippleWrapper.style.top = `${y}px`;

    game.appendChild(rippleWrapper);

    // 动画结束后移除
    inner.addEventListener("animationend", () => {
      rippleWrapper.remove();
    }, {
      once: true
    });
  }
</script>